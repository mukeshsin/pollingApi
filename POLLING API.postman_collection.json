{
	"info": {
		"_postman_id": "82f075a0-8578-4792-89f5-de74184cbcee",
		"name": "POLLING API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23386926"
	},
	"item": [
		{
			"name": "Roles",
			"item": [
				{
					"name": "create roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1: if Everything is ok\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"TEST CASES 2: If data is correct and everything is ok and send Successful create message\", function () {\r",
									"   let data= pm.response.json()\r",
									"    pm.expect(data.message).to.eql(\"role created successfully\");\r",
									"\r",
									" });\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response time is less than 300ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Response body contains message\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Hr\",\r\n    \"description\":\"Human resources (HR) is the division of a business responsible for finding, screening, recruiting, and training job applicants.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/role/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"role",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test( \"TEST CASES 1: Status code is 200\", function() {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response is an array\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Array contains role objects\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData[0]).to.have.all.keys('id', 'name', 'description','createdAt','updatedAt');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/role/list",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"role",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  single role by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test( \"TEST CASES 1: Status code is 200\", function() {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response is an object\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Object has correct keys\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.have.all.keys('id', 'name', 'description','updatedAt','createdAt');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/role/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"role",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "role update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1: if Everything is ok\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3: If data is correct and everything is ok and send Successful create message\", function () {\r",
									"   let data= pm.response.json()\r",
									"    pm.expect(data.message).to.eql(\"Role updated successfully\");\r",
									"\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"designer\",\r\n    \"description\":\"Conceptualize visuals based on requirements. Prepare rough drafts and present ideas. Develop illustrations, logos and other designs using software or by hand\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/role/edit/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"role",
								"edit",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "role delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1: if Everything is ok\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 300ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3: If data is correct and everything is ok and send Successful create message\", function () {\r",
									"   let data= pm.response.json()\r",
									"    pm.expect(data.message).to.eql(\"Role Deleted\");\r",
									"\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/role/delete/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"role",
								"delete",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "User register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"TEST CASES 1: if Everything is ok\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:response body contain message\",function(){\r",
									"    let data= pm.response.json()\r",
									"    pm.expect(data.message).to.eql(\"User register successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response time is less than 450ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(450);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"inno@2020\",\r\n    \"firstName\":\"karan\",\r\n    \"lastName\":\"singh\",\r\n    \"email\":\"karansingh1@gmail.com\",\r\n    \"roleId\":\"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest(function (response) {\r",
									"    // Assert that the response status code is 200\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Assert that the response body contains the user object and a token\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"user\");\r",
									"    pm.expect(json).to.have.property(\"token\");\r",
									"  });\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"amitkumar1@gmail.com\",\r\n    \"password\":\"inno@2020\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "creates users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response should contain message 'user created successfully'\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'user created successfully');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNDQwNjM0LCJleHAiOjE2NzM0NTE0MzR9.z2waBfKOmbVCJF7VW262QlybK62TKikCzmh4xyC2lQs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"inno2020\",\r\n    \"firstName\":\"neha1\",\r\n    \"lastName\":\"singh\",\r\n    \"email\":\"neha1234@gmail.com\",\r\n    \"roleId\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user lists by page no.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response should be an object\", function () {\r",
									"    pm.expect(Array.isArray(pm.response.json())).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response should have expected keys\", function () {\r",
									"    const rows = pm.response.json().rows;\r",
									"    rows.forEach(data => {\r",
									"        pm.expect(data).to.have.all.keys([ 'id','password','firstName','lastName','email','companyId','roleId',\r",
									"        'updatedAt','createdAt']);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 4:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/user/list/1?limit=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"list",
								"1"
							],
							"query": [
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response should be an object\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Response should contain valid user object\", function () {\r",
									"    const user = pm.response.json();\r",
									"    pm.expect(user).to.have.all.keys([\"id\",\r",
									"    \"password\",\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"companyId\",\r",
									"    \"roleId\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\" ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/user/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "user updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 300ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response should contain message 'User updated'\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'User updated');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"inno2020\",\r\n    \"firstName\":\"neha1\",\r\n    \"lastName\":\"singh\",\r\n    \"email\":\"neha12@gmail.com\",\r\n    \"roleId\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "userOwnProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 300ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response should be an object\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\" TEST CASES 4:Response should contain valid user object\", function () {\r",
									"    const user = pm.response.json();\r",
									"    pm.expect(user).to.have.all.keys(['id', 'firstName', 'lastName', 'email']);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/own/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"own",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "user deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1: if Everything is ok\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 400ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3: If data is correct and everything is ok and send Successful create message\", function () {\r",
									"   let data= pm.response.json()\r",
									"    pm.expect(data.message).to.eql(\"User Deleted\");\r",
									"\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNDQwNjM0LCJleHAiOjE2NzM0NTE0MzR9.z2waBfKOmbVCJF7VW262QlybK62TKikCzmh4xyC2lQs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/user/29",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"29"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Polls",
			"item": [
				{
					"name": "poll add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"TEST CASES 2:Response should contain poll object\", function () {\r",
									"    const poll = pm.response.json().poll;\r",
									"    pm.expect(poll).to.have.all.keys(['id', 'title', 'createdBy','updatedAt','createdBy']);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response should contain optionsTitle array\", function () {\r",
									"    const optionsTitle = pm.response.json().optionsTitle;\r",
									"    pm.expect(Array.isArray(optionsTitle)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Options should have expected keys\", function () {\r",
									"    const optionsTitle = pm.response.json().optionsTitle;\r",
									"    optionsTitle.forEach(option => {\r",
									"        pm.expect(option).to.have.all.keys([ 'optionTitle', 'pollId']);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Which one is your favourite  junk food?\",\r\n  \"options\":[\r\n      {\r\n        \"optionTitle\":\"momo\"\r\n      },{\r\n          \"optionTitle\":\"fries\"\r\n      },{\r\n          \"optionTitle\":\"pizza\"\r\n      }\r\n      \r\n  ],\r\n  \"pollId\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/poll/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"poll",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASE 2:Response should contain rows array\", function () {\r",
									"    const rows = pm.response.json().rows;\r",
									"    pm.expect(Array.isArray(rows)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:rows should have expected keys\", function () {\r",
									"    const rows = pm.response.json().rows;\r",
									"    rows.forEach(row => {\r",
									"        pm.expect(row).to.have.all.keys(['id', 'title', 'createdBy','createdAt' ,'updatedAt','optionList']);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Response should contain polls object\", function () {\r",
									"    const polls = pm.response.json();\r",
									"    pm.expect(polls).to.have.all.keys(['count', 'rows']);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 5:Option list should have expected keys\", function () {\r",
									"    const polls = pm.response.json();\r",
									" if (polls.rows.optionList) {\r",
									"      for (let i = 0; i < polls.rows.length; i++) {\r",
									"          polls.rows[i].optionList[i].voteCount.length;\r",
									"      }\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/poll/list/1?limit=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"poll",
								"list",
								"1"
							],
							"query": [
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response should contain poll object\", function () {\r",
									"    const poll = pm.response.json();\r",
									"    pm.expect(poll).to.have.all.keys(['title', 'optionList']);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 4:Option list should have expected keys\", function () {\r",
									"    const poll = pm.response.json();\r",
									"    poll.optionList.forEach(option => {\r",
									"        pm.expect(option).to.have.all.keys(['id', 'optionTitle', 'pollId', 'voteCount', 'totalVoteCount']);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNTE4NTg3LCJleHAiOjE2NzM1MjkzODd9.dt1MH6NAfMJDuuXGb_ZlAPxLjyQdkW-GjZiWlmMs6sI",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/poll/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"poll",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "update poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASE 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3:Response is JSON\", () => {\r",
									"  pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 4:Poll was updated\", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"poll updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNDQwNjM0LCJleHAiOjE2NzM0NTE0MzR9.z2waBfKOmbVCJF7VW262QlybK62TKikCzmh4xyC2lQs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"title\":\"what is your favourite actor\",\r\n\"createdBy\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/poll/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"poll",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response time is less than 300ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 3:Poll was deleted\", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"poll delete successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNDQwNjM0LCJleHAiOjE2NzM0NTE0MzR9.z2waBfKOmbVCJF7VW262QlybK62TKikCzmh4xyC2lQs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/poll/7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"poll",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vote",
			"item": [
				{
					"name": "vote count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response is JSON\", () => {\r",
									"  pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASE 3:Vote was created\", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"vote create successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjczNTE5MDczLCJleHAiOjE2NzM1Mjk4NzN9.yWSBo3rGev_v_tgi3yIy4RlpxgqB1Xa5i0OWyVk9jmw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"optionId\":\"4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/vote/count",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"vote",
								"count"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "company register",
			"item": [
				{
					"name": "company register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response is JSON\", () => {\r",
									"  pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjcyNjY0MjMwLCJleHAiOjE2NzI2NzUwMzB9.40du41ozkCG9Nz4RSVAYjhDqnnKNoj4-KeNpjnDBTh0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\":\" mk1234 pvt.ltd\",\r\n    \"email\":\"rv1234@gmail.com\",\r\n    \"address\":\"Delhi\",\r\n    \"password\":\"abc123\",\r\n    \"firstName\":\"rv43\",\r\n    \"lastName\":\"singh\",\r\n    \"name\":\"carpenter1234\",\r\n    \"description\":\"carpenter is a person who build\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/company/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"company",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "options",
			"item": [
				{
					"name": "update option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 2:Response is JSON\", () => {\r",
									"  pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"TEST CASES 3:Poll was updated\", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"option updated successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjczNDQwNjM0LCJleHAiOjE2NzM0NTE0MzR9.z2waBfKOmbVCJF7VW262QlybK62TKikCzmh4xyC2lQs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"optionTitle\":\"anilkapoor\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/option/edit/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"option",
								"edit",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TEST CASES 1:Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"TEST CASES 2:Poll was deleted\", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"option delete successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjcyNjYzNDkxLCJleHAiOjE2NzI2NzQyOTF9.qUvJoKvCMVNUQk5aJk1CKU0ze86wwFznQ_iSzNb9Frk",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/option/delete/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"option",
								"delete",
								"8"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}